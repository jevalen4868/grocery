package com.heb.j01.grocery.repository;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class RepoUtils {
    /**
     * This guy can be configured outside of the jvm, but generally it's better to let some framework
     * handle connection pooling. In this case it's configured in tomcat server.xml.
     * @return
     * @throws NamingException
     */

    /**
     * This dynamically typed method returns the list of domain objects as
     * expected in the calling method.
     *
     * @param sql
     * @param handler
     * @return
     * @throws NamingException
     * @throws SQLException
     */
    public static <T> List<T> executeQuery(DataSource dataSource, String sql, ResultSetHandler<List<T>> handler, Object... params)
            throws NamingException, SQLException {
        QueryRunner run = new QueryRunner(dataSource);
        // Execute the SQL statement and return the results in a List of
        // objects generated by the BeanListHandler.
        List<T> rows = run.query(sql, handler, params);
        return rows;
    }

    /**
     * Runs insert query and returns id.
     *
     * @param sql
     * @return
     * @throws NamingException
     * @throws SQLException
     */
    public static Long insertQuery(DataSource dataSource, Connection connection, String sql, Object... params) throws NamingException, SQLException {
        QueryRunner queryRunner = new QueryRunner(dataSource);
        // String sql = "insert into users (username) values (?)";
        Long id = queryRunner.insert(connection, sql, new ScalarHandler<Long>(), params);
        return id;
    }

    /**
     * Runs sql and returns itemsAffected.
     *
     * @param sql
     * @param params
     * @return
     * @throws NamingException
     * @throws SQLException
     */
    public static Integer deleteOrUpdateQuery(DataSource dataSource, Connection connection, String sql, Object... params) throws NamingException, SQLException {
        QueryRunner queryRunner = new QueryRunner(dataSource);
        Integer rowsAffected = queryRunner.update(connection, sql, params);
        return rowsAffected;
    }
}
